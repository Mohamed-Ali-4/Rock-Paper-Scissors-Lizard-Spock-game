#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_USERS 100
#define USER_FILE "users.txt"

// Function prototypes
void register_user();
int login_user(char* username);
const char* determine_winner(int player, int computer);
void get_computer_choice(int* computer, const int history[], int round, const char* difficulty);
int is_valid_choice(int choice);
void play_game(const char* username);

// Function to register a new user
void register_user() {
    char username[50], password[50];

    printf("Enter a username: ");
    scanf("%s", username);
    printf("Enter a password: ");
    scanf("%s", password);

    // Save the user to the file
    FILE* file = fopen(USER_FILE, "a");
    if (file == NULL) {
        printf("Error opening file for registration.\n");
        return;
    }

    fprintf(file, "%s %s\n", username, password);
    fclose(file);

    printf("Registration successful!\n");
}

// Function to authenticate a user
int login_user(char* username) {
    char input_username[50], input_password[50], file_username[50], file_password[50];

    printf("Enter your username: ");
    scanf("%s", input_username);
    printf("Enter your password: ");
    scanf("%s", input_password);

    // Read users from the file
    FILE* file = fopen(USER_FILE, "r");
    if (file == NULL) {
        printf("Error opening file for login.\n");
        return 0;
    }

    while (fscanf(file, "%s %s", file_username, file_password) != EOF) {
        if (strcmp(input_username, file_username) == 0 && strcmp(input_password, file_password) == 0) {
            strcpy(username, input_username);
            fclose(file);
            printf("Login successful!\n");
            return 1;
        }
    }

    fclose(file);
    printf("Invalid username or password.\n");
    return 0;
}

// Function to determine the winner
const char* determine_winner(int player, int computer) {
    if (player == computer) return "It's a tie!";
    if ((player == 1 && (computer == 3 || computer == 4)) ||
        (player == 2 && (computer == 1 || computer == 5)) ||
        (player == 3 && (computer == 2 || computer == 4)) ||
        (player == 4 && (computer == 2 || computer == 5)) ||
        (player == 5 && (computer == 1 || computer == 3))) {
        return "You win!";
    }
    return "Computer wins!";
}

// Function to get the computer's choice
void get_computer_choice(int* computer, const int history[], int round, const char* difficulty) {
    if (strcmp(difficulty, "easy") == 0) {
        *computer = rand() % 5 + 1;
    } else if (strcmp(difficulty, "medium") == 0) {
        int player_last = history[round - 1];
        if (player_last == 1) *computer = 2;
        else if (player_last == 2) *computer = 3;
        else if (player_last == 3) *computer = 1;
        else if (player_last == 4) *computer = 1;
        else if (player_last == 5) *computer = 4;
        else *computer = rand() % 5 + 1;
    } else if (strcmp(difficulty, "hard") == 0) {
        int counts[5] = {0};
        for (int i = 0; i < round; i++) {
            counts[history[i] - 1]++;
        }
        int most_common = 0;
        for (int i = 1; i < 5; i++) {
            if (counts[i] > counts[most_common]) most_common = i;
        }
        if (most_common == 0) *computer = 2;
        else if (most_common == 1) *computer = 3;
        else if (most_common == 2) *computer = 1;
        else if (most_common == 3) *computer = 1;
        else if (most_common == 4) *computer = 4;
    }
}

// Function to validate player input
int is_valid_choice(int choice) {
    return choice >= 1 && choice <= 5;
}

// Function to play the game
void play_game(const char* username) {
    int player, computer;
    char difficulty[10];
    int history[100];
    int player_score = 0, computer_score = 0, rounds;

    printf("Choose difficulty (easy, medium, hard): ");
    scanf("%s", difficulty);

    printf("How many rounds do you want to play? ");
    scanf("%d", &rounds);

    for (int i = 0; i < rounds; i++) {
        printf("\nRound %d:\n", i + 1);

        do {
            printf("Enter your choice (1: rock, 2: paper, 3: scissors, 4: lizard, 5: spock): ");
            scanf("%d", &player);
            if (!is_valid_choice(player)) {
                printf("Invalid choice! Please choose a number between 1 and 5.\n");
            }
        } while (!is_valid_choice(player));

        history[i] = player;
        get_computer_choice(&computer, history, i, difficulty);

        printf("Computer chose: %d\n", computer);
        const char* result = determine_winner(player, computer);
        printf("%s\n", result);

        if (strcmp(result, "You win!") == 0) player_score++;
        else if (strcmp(result, "Computer wins!") == 0) computer_score++;
    }

    printf("\nFinal Score:\nYou: %d\nComputer: %d\n", player_score, computer_score);
    if (player_score > computer_score) printf("You are the overall winner!\n");
    else if (player_score < computer_score) printf("Computer is the overall winner!\n");
    else printf("It's an overall tie!\n");

    char play_again;
    printf("Do you want to play again? (y/n): ");
    scanf(" %c", &play_again);
    if (play_again == 'y' || play_again == 'Y') {
        play_game(username);
    } else {
        printf("Thanks for playing, %s!\n", username);
    }
}

int main() {
    char username[50];

    printf("Welcome to Rock (1), Paper (2), Scissors (3), Lizard (4), Spock (5) with Authentication!\n");
    printf("1. Register\n2. Login\nChoose an option: ");

    int option;
    scanf("%d", &option);

    if (option == 1) {
        register_user();
        return 0;
    } else if (option == 2) {
        if (!login_user(username)) return 0;
    } else {
        printf("Invalid option. Exiting.\n");
        return 0;
    }

    play_game(username);
    return 0;
}
